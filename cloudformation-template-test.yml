AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy User Management Service on ECS Fargate with ALB and API Gateway - TEST Environment

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID to use for the test environment
  PublicSubnet1Id:
    Type: AWS::EC2::Subnet::Id
    Description: First public subnet ID
  PublicSubnet2Id:
    Type: AWS::EC2::Subnet::Id
    Description: Second public subnet ID
  ContainerPort:
    Type: Number
    Default: 8080
    Description: Port on which the container is listening
  DesiredCount:
    Type: Number
    Default: 1
    Description: Desired number of tasks in the ECS service
  ImageUrl:
    Type: String
    Default: sindhu030/user_role_production:test-latest
    Description: Docker image URL for the User Management Service
  DBHost:
    Type: String
    Default: nucleus-staging.c6j42qq2krlk.us-east-1.rds.amazonaws.com
    Description: RDS database endpoint
  DBName:
    Type: String
    Default: postgres
    Description: Database name
  DBUsername:
    Type: String
    Default: postgres
    Description: Database username
  DBPassword:
    Type: String
    Default: nucleus-staging
    NoEcho: true
    Description: Database password
  ClientManagementServiceUrl:
    Type: String
    Default: https://test-api.execute-api.us-east-1.amazonaws.com/test
    Description: Client Management Service URL
  Environment:
    Type: String
    Default: test
    AllowedValues: [test]
    Description: Environment name

Resources:

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic to ALB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-user-management-alb-sg'

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ALB to ECS and database access
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-user-management-ecs-sg'

  UserManagementCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${Environment}-user-management-cluster'
      CapacityProviders:
        - FARGATE
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: PrivateRegistryAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: '*'
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'

  UserManagementLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${Environment}-user-management-service'
      RetentionInDays: 7

  AppTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${Environment}-user-management-task'
      Cpu: '512'
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      Tags:
        - Key: Environment
          Value: test
      ContainerDefinitions:
        - Name: user-management-service
          Image: !Ref ImageUrl
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Protocol: tcp
          Environment:
            - Name: SPRING_PROFILES_ACTIVE
              Value: test
            - Name: SPRING_DATASOURCE_URL
              Value: !Sub 'jdbc:postgresql://${DBHost}:5432/${DBName}'
            - Name: SPRING_DATASOURCE_USERNAME
              Value: !Ref DBUsername
            - Name: SPRING_DATASOURCE_PASSWORD
              Value: !Ref DBPassword
            - Name: CLIENT_MANAGEMENT_SERVICE_URL
              Value: !Ref ClientManagementServiceUrl
            - Name: SERVER_PORT
              Value: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref UserManagementLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: ecs

  AppALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${Environment}-user-management-alb'
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref PublicSubnet1Id
        - !Ref PublicSubnet2Id
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-user-management-alb'

  AppALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${Environment}-user-management-tg'
      Port: !Ref ContainerPort
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckPath: /actuator/health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      HealthCheckPort: !Ref ContainerPort

  AppALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AppALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppALBTargetGroup

  AppService:
    Type: AWS::ECS::Service
    DependsOn: AppALBListener
    Properties:
      ServiceName: !Sub '${Environment}-user-management-service'
      Cluster: !Ref UserManagementCluster
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      TaskDefinition: !Ref AppTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PublicSubnet1Id
            - !Ref PublicSubnet2Id
      LoadBalancers:
        - ContainerName: user-management-service
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref AppALBTargetGroup
      HealthCheckGracePeriodSeconds: 60

  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub '${Environment}-user-management-api'
      ProtocolType: HTTP
      Description: API Gateway for User Management Service - Test Environment

  ApiGatewayIntegrationClean:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn: AppALBListener
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: HTTP_PROXY
      IntegrationUri: !Sub 'http://${AppALB.DNSName}'
      IntegrationMethod: ANY
      TimeoutInMillis: 30000
      PayloadFormatVersion: '1.0'

  ApiGatewayDefaultRouteNew:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: '$default'
      Target: !Sub 'integrations/${ApiGatewayIntegrationClean}'

  ApiGatewayStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGateway
      StageName: test
      AutoDeploy: true

Outputs:
  ApiEndpoint:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/test/'
  ALBEndpoint:
    Description: 'Application Load Balancer DNS Name'
    Value: !GetAtt AppALB.DNSName
  ECSCluster:
    Description: 'ECS Cluster Name'
    Value: !Ref UserManagementCluster
  ECSService:
    Description: 'ECS Service Name'
    Value: !Ref AppService
