name: Build, Publish Docker Image and Deploy to ECS

on:
  push:
    branches: [ "main", "master" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: docker.io/sindhu030/user_management_service

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      - name: Build JAR
        run: |
          ./gradlew --version
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            ./gradlew clean test bootJar
          else
            ./gradlew clean bootJar -x test
          fi

      - name: Log in to Docker Hub
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=tag
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-to-ecs:
    needs: build-and-push
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    env:
      ROLE_ARN: ${{ vars.AWS_ROLE_TO_ASSUME || secrets.AWS_ROLE_TO_ASSUME || secrets.AWS_ROLE_ARN }}
      AWS_REGION_FALLBACK: ${{ vars.AWS_REGION || secrets.AWS_REGION || 'us-east-1' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Precheck role ARN
        run: |
          if [ -z "${ROLE_ARN}" ]; then
            echo "AWS role ARN not set. Define repo variable 'AWS_ROLE_TO_ASSUME' or secret 'AWS_ROLE_TO_ASSUME' (or 'AWS_ROLE_ARN')." >&2
            exit 1
          fi
          echo "Using role: ${ROLE_ARN}"

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION_FALLBACK }}

      - name: Verify AWS identity
        run: aws sts get-caller-identity

      - name: Deploy to ECS (force new deployment)
        run: |
          aws ecs update-service \
            --cluster production-user-management-cluster \
            --service production-user-management-service \
            --force-new-deployment

          echo "Waiting for deployment to complete..."
          aws ecs wait services-stable \
            --cluster production-user-management-cluster \
            --services production-user-management-service

          echo "ECS deployment completed successfully!"


