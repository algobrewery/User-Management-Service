name: CI/CD Pipeline - User Management Service

on:
  push:
    branches: [ "main", "master" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:
  schedule:
    # Run canary tests every 5 minutes (configurable)
    - cron: '*/30 * * * *'

permissions:
  id-token: write
  contents: read

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: sindhu030/user_management_service
  AWS_REGION: us-east-1

jobs:
  # Stage 1: Unit Tests and Build
  build-and-push:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      - name: Run Unit Tests
        run: |
          ./gradlew --version
          ./gradlew clean test bootJar

      - name: Log in to Docker Hub
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64

  # Stage 2: Deploy to Test Environment
  deploy-test:
    needs: build-and-push
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    name: Deploy to Test Environment
    env:
      ROLE_ARN: arn:aws:iam::624160185248:role/github-actions-ecs-deployer
      ECS_CLUSTER: test-user-management-cluster
      ECS_SERVICE: test-user-management-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Precheck role ARN
        run: |
          if [ -z "${ROLE_ARN}" ]; then
            echo "AWS role ARN not set. Define repo variable 'AWS_ROLE_TO_ASSUME' or secret 'AWS_ROLE_TO_ASSUME' (or 'AWS_ROLE_ARN')." >&2
            exit 1
          fi
          echo "Using role: ${ROLE_ARN}"

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::624160185248:role/github-actions-ecs-deployer
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com
          output-env-credentials: true

      - name: Verify AWS identity
        run: aws sts get-caller-identity

      - name: Update ECS service with new image
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment

      - name: Wait for ECS deployment to complete
        run: |
          echo "Waiting for test deployment to complete..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}
          echo "Test deployment completed successfully!"

  # Stage 3: Health Check on Test Environment
  health-check-test:
    needs: deploy-test
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    name: Health Check - Test Environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::624160185248:role/github-actions-ecs-deployer
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com
          output-env-credentials: true

      - name: Get Production API Gateway URL for Test
        id: get-test-url
        run: |
          API_URL=$(aws apigatewayv2 get-apis --query 'Items[?Name==`production-user-management-api`].ApiEndpoint' --output text)
          echo "api-url=$API_URL" >> $GITHUB_OUTPUT
          echo "Using Production API URL for Test: $API_URL"

      - name: Run Health Check on Test Environment
        run: |
          echo "Running health check on test environment..."
          API_URL="${{ steps.get-test-url.outputs.api-url }}/prod"
          echo "Testing health endpoint: $API_URL/actuator/health"
          
          # Wait for service to be ready
          for i in {1..30}; do
            if curl -f -s "$API_URL/actuator/health" > /dev/null; then
              echo "✅ Health check passed!"
              curl -s "$API_URL/actuator/health" | jq .
              break
            else
              echo "⏳ Waiting for service to be ready... (attempt $i/30)"
              sleep 10
            fi
          done
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

  # Stage 4: Deploy to Production Environment
  deploy-production:
    needs: [build-and-push, health-check-test]
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    name: Deploy to Production Environment
    env:
      ROLE_ARN: arn:aws:iam::624160185248:role/github-actions-ecs-deployer
      ECS_CLUSTER: production-user-management-cluster
      ECS_SERVICE: production-user-management-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Precheck role ARN
        run: |
          if [ -z "${ROLE_ARN}" ]; then
            echo "AWS role ARN not set. Define repo variable 'AWS_ROLE_TO_ASSUME' or secret 'AWS_ROLE_TO_ASSUME' (or 'AWS_ROLE_ARN')." >&2
            exit 1
          fi
          echo "Using role: ${ROLE_ARN}"

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::624160185248:role/github-actions-ecs-deployer
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com
          output-env-credentials: true

      - name: Verify AWS identity
        run: aws sts get-caller-identity

      - name: Get Production Environment API Gateway URL
        id: get-prod-url
        run: |
          API_URL=$(aws apigatewayv2 get-apis --query 'Items[?Name==`production-user-management-api`].ApiEndpoint' --output text)
          echo "api-url=$API_URL" >> $GITHUB_OUTPUT
          echo "Production API URL: $API_URL"

      - name: Run Pre-deployment Health Check
        run: |
          echo "Running pre-deployment health check..."
          API_URL="${{ steps.get-prod-url.outputs.api-url }}/prod"
          echo "Testing health endpoint: $API_URL/actuator/health"
          
          # Check if service is currently healthy
          if curl -f -s "$API_URL/actuator/health" > /dev/null; then
            echo "✅ Pre-deployment health check passed!"
            curl -s "$API_URL/actuator/health" | jq .
          else
            echo "⚠️ Pre-deployment health check failed - service may be down"
          fi
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

      - name: Deploy to Production ECS
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment

      - name: Wait for Production deployment to complete
        run: |
          echo "Waiting for production deployment to complete..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}
          echo "Production deployment completed successfully!"

  # Stage 5: Post-deployment Health Check
  post-deployment-tests:
    needs: deploy-production
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    name: Post-deployment Tests - Production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::624160185248:role/github-actions-ecs-deployer
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com
          output-env-credentials: true

      - name: Get Production Environment API Gateway URL
        id: get-prod-url-post
        run: |
          API_URL=$(aws apigatewayv2 get-apis --query 'Items[?Name==`production-user-management-api`].ApiEndpoint' --output text)
          echo "api-url=$API_URL" >> $GITHUB_OUTPUT
          echo "Production API URL: $API_URL"

      - name: Run Post-deployment Health Check
        run: |
          echo "Running post-deployment health check..."
          API_URL="${{ steps.get-prod-url-post.outputs.api-url }}/prod"
          echo "Testing health endpoint: $API_URL/actuator/health"
          
          # Wait for service to be ready after deployment
          for i in {1..30}; do
            if curl -f -s "$API_URL/actuator/health" > /dev/null; then
              echo "✅ Post-deployment health check passed!"
              curl -s "$API_URL/actuator/health" | jq .
              break
            else
              echo "⏳ Waiting for service to be ready after deployment... (attempt $i/30)"
              sleep 10
            fi
          done
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}


  # Stage 6: Notification
  notify:
    needs: [build-and-push, deploy-test, health-check-test, deploy-production, post-deployment-tests]
    runs-on: ubuntu-latest
    name: Send Notifications
    if: always()
    steps:
      - name: Notify Success
        if: ${{ needs.deploy-production.result == 'success' }}
        run: |
          echo "✅ Production deployment successful!"
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"
          echo "Health Check: ${{ needs.post-deployment-tests.result }}"
          echo ""
          echo "📋 Manual Testing Required:"
          echo "Run the comprehensive API tests manually using:"
          echo "pwsh ./user-management-service-test.ps1"

      - name: Notify Failure
        if: ${{ needs.deploy-production.result == 'failure' }}
        run: |
          echo "❌ Production deployment failed!"
          echo "Check the logs for details."

  # Stage 7: Canary Tests (Production Monitoring)
  canary-tests:
    # Run canary tests on schedule, manual trigger, or after successful deployment
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
    runs-on: ubuntu-latest
    name: Canary Tests - Production Monitoring
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::624160185248:role/github-actions-ecs-deployer
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com
          output-env-credentials: true

      - name: Get Production API Gateway URL
        id: get-prod-url-canary
        run: |
          API_URL=$(aws apigatewayv2 get-apis --query 'Items[?Name==`production-user-management-api`].ApiEndpoint' --output text)
          echo "api-url=$API_URL" >> $GITHUB_OUTPUT
          echo "Production API URL for canary tests: $API_URL"

      - name: Run Canary Tests
        run: |
          echo "🔍 Starting canary tests for production monitoring..."
          API_URL="${{ steps.get-prod-url-canary.outputs.api-url }}/prod"
          API_KEY="pzKOjno8c-aLPvTz0L4b6U-UGDs7_7qq3W7qu7lpF7w"
          ORG_UUID="cts"
          ADMIN_USER_UUID="42388507-ec8f-47ef-a7c7-8ddb69763ac6"
          
          # Test results tracking
          TOTAL_TESTS=0
          PASSED_TESTS=0
          FAILED_TESTS=0
          START_TIME=$(date +%s)
          
          # Function to run a single test
          run_test() {
            local test_name="$1"
            local method="$2"
            local endpoint="$3"
            local expected_status="${4:-200}"
            local timeout="${5:-10}"
            
            TOTAL_TESTS=$((TOTAL_TESTS + 1))
            test_start=$(date +%s%3N)
            
            echo "Testing: $test_name"
            echo "  URL: $API_URL$endpoint"
            
            # Prepare headers
            headers=(
              -H "x-api-key: $API_KEY"
              -H "x-app-org-uuid: $ORG_UUID"
              -H "x-app-user-uuid: $ADMIN_USER_UUID"
              -H "x-app-client-user-session-uuid: canary-session-$(date +%s)"
              -H "x-app-trace-id: canary-trace-$(date +%s)"
              -H "x-app-region-id: us-east-1"
              -H "Content-Type: application/json"
            )
            
            # Run the test
            if response=$(curl -s -w "\n%{http_code}" --max-time $timeout "${headers[@]}" -X "$method" "$API_URL$endpoint" 2>/dev/null); then
              http_code=$(echo "$response" | tail -n1)
              response_body=$(echo "$response" | head -n -1)
              test_end=$(date +%s%3N)
              duration=$((test_end - test_start))
              
              if [ "$http_code" -eq "$expected_status" ]; then
                echo "  ✅ PASSED (${duration}ms)"
                PASSED_TESTS=$((PASSED_TESTS + 1))
                return 0
              else
                echo "  ❌ FAILED - Expected $expected_status, got $http_code (${duration}ms)"
                FAILED_TESTS=$((FAILED_TESTS + 1))
                return 1
              fi
            else
              echo "  ❌ FAILED - Request timeout or connection error"
              FAILED_TESTS=$((FAILED_TESTS + 1))
              return 1
            fi
          }
          
          # Run canary tests
          echo ""
          echo "🧪 Running canary tests..."
          echo "=========================="
          
          # Test 1: Health Check (most critical)
          run_test "Health Check" "GET" "/actuator/health" 200
          
          # Test 2: Application Info
          run_test "Application Info" "GET" "/actuator/info" 200
          
          # Test 3: System Roles (lightweight read operation)
          run_test "System Roles" "GET" "/role/bootstrap/system-managed" 200
          
          # Test 4: List Users (lightweight read operation with request body)
          list_users_payload='{"page": 0, "size": 1}'
          echo "Testing: List Users"
          echo "  URL: $API_URL/users/filter"
          echo "  Payload: $list_users_payload"
          
          TOTAL_TESTS=$((TOTAL_TESTS + 1))
          test_start=$(date +%s%3N)
          
          if response=$(curl -s -w "\n%{http_code}" --max-time 10 "${headers[@]}" -X "POST" -d "$list_users_payload" "$API_URL/users/filter" 2>/dev/null); then
            http_code=$(echo "$response" | tail -n1)
            response_body=$(echo "$response" | head -n -1)
            test_end=$(date +%s%3N)
            duration=$((test_end - test_start))
            
            if [ "$http_code" -eq 200 ]; then
              echo "  ✅ PASSED (${duration}ms)"
              PASSED_TESTS=$((PASSED_TESTS + 1))
            else
              echo "  ❌ FAILED - Expected 200, got $http_code (${duration}ms)"
              echo "  Response: $response_body"
              FAILED_TESTS=$((FAILED_TESTS + 1))
            fi
          else
            echo "  ❌ FAILED - Request timeout or connection error"
            FAILED_TESTS=$((FAILED_TESTS + 1))
          fi
          
          # Calculate results
          END_TIME=$(date +%s)
          TOTAL_DURATION=$((END_TIME - START_TIME))
          SUCCESS_RATE=$((PASSED_TESTS * 100 / TOTAL_TESTS))
          
          echo ""
          echo "📊 CANARY TEST RESULTS"
          echo "====================="
          echo "Total Tests: $TOTAL_TESTS"
          echo "Passed: $PASSED_TESTS"
          echo "Failed: $FAILED_TESTS"
          echo "Success Rate: $SUCCESS_RATE%"
          echo "Duration: ${TOTAL_DURATION}s"
          echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          # Set GitHub outputs for other jobs
          echo "canary-total-tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "canary-passed-tests=$PASSED_TESTS" >> $GITHUB_OUTPUT
          echo "canary-failed-tests=$FAILED_TESTS" >> $GITHUB_OUTPUT
          echo "canary-success-rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
          echo "canary-duration=$TOTAL_DURATION" >> $GITHUB_OUTPUT
          
          # Determine overall status
          if [ $FAILED_TESTS -eq 0 ]; then
            echo "🎉 ALL CANARY TESTS PASSED! Production service is healthy."
            echo "canary-status=success" >> $GITHUB_OUTPUT
          elif [ $SUCCESS_RATE -ge 75 ]; then
            echo "⚠️  MOST CANARY TESTS PASSED. Some issues detected but service is mostly healthy."
            echo "canary-status=warning" >> $GITHUB_OUTPUT
          else
            echo "🚨 CANARY TESTS FAILED! Production service has issues."
            echo "canary-status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

      - name: Send Canary Test Results to Slack (Optional)
        if: always()
        run: |
          echo "📢 Canary test results:"
          echo "Status: ${{ steps.canary-tests.outputs.canary-status }}"
          echo "Success Rate: ${{ steps.canary-tests.outputs.canary-success-rate }}%"
          echo "Duration: ${{ steps.canary-tests.outputs.canary-duration }}s"
          echo ""
          echo "💡 To set up Slack notifications, add SLACK_WEBHOOK_URL to repository secrets"
          # Uncomment and configure if you want Slack notifications:
          # if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
          #   curl -X POST -H 'Content-type: application/json' \
          #     --data "{\"text\":\"🔍 Canary Test Results: ${{ steps.canary-tests.outputs.canary-status }} - Success Rate: ${{ steps.canary-tests.outputs.canary-success-rate }}%\"}" \
          #     ${{ secrets.SLACK_WEBHOOK_URL }}
          # fi