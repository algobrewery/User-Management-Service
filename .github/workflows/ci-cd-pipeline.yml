name: CI/CD Pipeline - User Management Service

on:
  push:
    branches: [ "main", "master" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: sindhu030/user_management_service
  AWS_REGION: us-east-1

jobs:
  # Stage 1: Unit Tests and Build
  build-and-push:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      - name: Run Unit Tests
        run: |
          ./gradlew --version
          ./gradlew clean test bootJar

      - name: Log in to Docker Hub
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64

  # Stage 2: Deploy to Test Environment
  deploy-test:
    needs: build-and-push
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    name: Deploy to Test Environment
    env:
      ROLE_ARN: arn:aws:iam::624160185248:role/github-actions-ecs-deployer
      ECS_CLUSTER: test-user-management-cluster
      ECS_SERVICE: test-user-management-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Precheck role ARN
        run: |
          if [ -z "${ROLE_ARN}" ]; then
            echo "AWS role ARN not set. Define repo variable 'AWS_ROLE_TO_ASSUME' or secret 'AWS_ROLE_TO_ASSUME' (or 'AWS_ROLE_ARN')." >&2
            exit 1
          fi
          echo "Using role: ${ROLE_ARN}"

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::624160185248:role/github-actions-ecs-deployer
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com
          output-env-credentials: true

      - name: Verify AWS identity
        run: aws sts get-caller-identity

      - name: Update ECS service with new image
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment

      - name: Wait for ECS deployment to complete
        run: |
          echo "Waiting for test deployment to complete..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}
          echo "Test deployment completed successfully!"

  # Stage 3: Health Check on Test Environment
  health-check-test:
    needs: deploy-test
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    name: Health Check - Test Environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::624160185248:role/github-actions-ecs-deployer
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com
          output-env-credentials: true

      - name: Get Production API Gateway URL for Test
        id: get-test-url
        run: |
          API_URL=$(aws apigatewayv2 get-apis --query 'Items[?Name==`production-user-management-api`].ApiEndpoint' --output text)
          echo "api-url=$API_URL" >> $GITHUB_OUTPUT
          echo "Using Production API URL for Test: $API_URL"

      - name: Run Health Check on Test Environment
        run: |
          echo "Running health check on test environment..."
          pwsh ./health-check-enhanced.ps1 -Environment test -ApiUrl ${{ steps.get-test-url.outputs.api-url }}
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

  # Stage 4: Deploy to Production Environment
  deploy-production:
    needs: [build-and-push, health-check-test]
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    name: Deploy to Production Environment
    env:
      ROLE_ARN: arn:aws:iam::624160185248:role/github-actions-ecs-deployer
      ECS_CLUSTER: production-user-management-cluster
      ECS_SERVICE: production-user-management-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Precheck role ARN
        run: |
          if [ -z "${ROLE_ARN}" ]; then
            echo "AWS role ARN not set. Define repo variable 'AWS_ROLE_TO_ASSUME' or secret 'AWS_ROLE_TO_ASSUME' (or 'AWS_ROLE_ARN')." >&2
            exit 1
          fi
          echo "Using role: ${ROLE_ARN}"

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::624160185248:role/github-actions-ecs-deployer
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com
          output-env-credentials: true

      - name: Verify AWS identity
        run: aws sts get-caller-identity

      - name: Get Production Environment API Gateway URL
        id: get-prod-url
        run: |
          API_URL=$(aws apigatewayv2 get-apis --query 'Items[?Name==`production-user-management-api`].ApiEndpoint' --output text)
          echo "api-url=$API_URL" >> $GITHUB_OUTPUT
          echo "Production API URL: $API_URL"

      - name: Run Pre-deployment Health Check
        run: |
          echo "Running pre-deployment health check..."
          pwsh ./health-check-enhanced.ps1 -Environment production -ApiUrl ${{ steps.get-prod-url.outputs.api-url }}
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

      - name: Deploy to Production ECS
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment

      - name: Wait for Production deployment to complete
        run: |
          echo "Waiting for production deployment to complete..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}
          echo "Production deployment completed successfully!"

  # Stage 5: Post-deployment Health Check
  post-deployment-tests:
    needs: deploy-production
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    name: Post-deployment Tests - Production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::624160185248:role/github-actions-ecs-deployer
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com
          output-env-credentials: true

      - name: Get Production Environment API Gateway URL
        id: get-prod-url-post
        run: |
          API_URL=$(aws apigatewayv2 get-apis --query 'Items[?Name==`production-user-management-api`].ApiEndpoint' --output text)
          echo "api-url=$API_URL" >> $GITHUB_OUTPUT
          echo "Production API URL: $API_URL"

      - name: Run Post-deployment Health Check
        run: |
          echo "Running post-deployment health check..."
          pwsh ./health-check-enhanced.ps1 -Environment production -ApiUrl ${{ steps.get-prod-url-post.outputs.api-url }}
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}


  # Stage 6: Notification
  notify:
    needs: [build-and-push, deploy-test, health-check-test, deploy-production, post-deployment-tests]
    runs-on: ubuntu-latest
    name: Send Notifications
    if: always()
    steps:
      - name: Notify Success
        if: ${{ needs.deploy-production.result == 'success' }}
        run: |
          echo "‚úÖ Production deployment successful!"
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"
          echo "Health Check: ${{ needs.post-deployment-tests.result }}"
          echo ""
          echo "üìã Manual Testing Required:"
          echo "Run the comprehensive API tests manually using:"
          echo "pwsh ./user-management-service-test.ps1"

      - name: Notify Failure
        if: ${{ needs.deploy-production.result == 'failure' }}
        run: |
          echo "‚ùå Production deployment failed!"
          echo "Check the logs for details."