[1mdiff --git a/build.gradle b/build.gradle[m
[1mindex 0ad0756..94caff1 100644[m
[1m--- a/build.gradle[m
[1m+++ b/build.gradle[m
[36m@@ -6,7 +6,7 @@[m [mplugins {[m
 [m
 group = 'com.userapi'[m
 version = '0.0.1-SNAPSHOT'[m
[31m-sourceCompatibility = '17'[m
[32m+[m[32msourceCompatibility = '18'[m
 [m
 configurations {[m
     compileOnly {[m
[36m@@ -47,8 +47,8 @@[m [mdependencies {[m
 [m
     runtimeOnly 'org.postgresql:postgresql'[m
 [m
[31m-    compileOnly 'org.projectlombok:lombok'[m
[31m-    annotationProcessor 'org.projectlombok:lombok'[m
[32m+[m[32m    compileOnly 'org.projectlombok:lombok:1.18.26'[m
[32m+[m[32m    annotationProcessor 'org.projectlombok:lombok:1.18.26'[m
 }[m
 [m
 test {[m
[36m@@ -64,3 +64,18 @@[m [mbootJar {[m
 jar {[m
     enabled = false[m
 }[m
[32m+[m
[32m+[m[32m// Add Java toolchain to ensure consistent Java version[m
[32m+[m[32mjava {[m
[32m+[m[32m    toolchain {[m
[32m+[m[32m        languageVersion = JavaLanguageVersion.of(18)[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// Configure annotation processing[m
[32m+[m[32mtasks.withType(JavaCompile) {[m
[32m+[m[32m    options.compilerArgs += [[m
[32m+[m[32m        '-parameters',[m
[32m+[m[32m        '-Xlint:none'[m
[32m+[m[32m    ][m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/userapi/models/internal/EmploymentInfoDto.java b/src/main/java/com/userapi/models/internal/EmploymentInfoDto.java[m
[1mindex 204587c..4968158 100644[m
[1m--- a/src/main/java/com/userapi/models/internal/EmploymentInfoDto.java[m
[1m+++ b/src/main/java/com/userapi/models/internal/EmploymentInfoDto.java[m
[36m@@ -24,7 +24,6 @@[m [mpublic class EmploymentInfoDto {[m
     @NonNull[m
     private String organizationUnit;[m
 [m
[31m-    @NonNull[m
     private String reportingManager;[m
 [m
     @NonNull[m
[1mdiff --git a/src/main/java/com/userapi/service/ApiKeyAuthenticationService.java b/src/main/java/com/userapi/service/ApiKeyAuthenticationService.java[m
[1mindex aa74c81..31a4b5c 100644[m
[1m--- a/src/main/java/com/userapi/service/ApiKeyAuthenticationService.java[m
[1m+++ b/src/main/java/com/userapi/service/ApiKeyAuthenticationService.java[m
[36m@@ -39,31 +39,39 @@[m [mpublic class ApiKeyAuthenticationService {[m
             return CompletableFuture.completedFuture(false);[m
         }[m
 [m
[32m+[m[32m        log.debug("Validating API key against Client Management Service at: {}", clientManagementServiceUrl);[m
[32m+[m
         try {[m
             WebClient webClient = webClientBuilder[m
                     .baseUrl(clientManagementServiceUrl)[m
                     .build();[m
 [m
[32m+[m[32m            // Try to call the root endpoint first to see what's available[m
[32m+[m[32m            String validationUrl = "/";[m
[32m+[m[32m            log.debug("Calling root endpoint to check API structure: {}{}", clientManagementServiceUrl, validationUrl);[m
[32m+[m
             // Call the Client Management Service to validate the API key asynchronously[m
[31m-            Mono<Boolean> validationMono = webClient.get()[m
[31m-                    .uri("/api/validate")[m
[32m+[m[32m            Mono<String> validationMono = webClient.get()[m
[32m+[m[32m                    .uri(validationUrl)[m
                     .header("x-api-key", apiKey)[m
                     .retrieve()[m
[31m-                    .bodyToMono(ApiKeyValidationResponse.class)[m
[31m-                    .map(response -> response.isValid())[m
[32m+[m[32m                    .bodyToMono(String.class)[m
                     .timeout(Duration.ofSeconds(timeoutSeconds))[m
[31m-                    .onErrorReturn(false)[m
[31m-                    .doOnNext(isValid -> log.debug("API key validation result: {}", isValid))[m
[32m+[m[32m                    .doOnNext(response -> log.debug("Received response from root endpoint: {}", response))[m
                     .doOnError(WebClientResponseException.class, e ->[m
[31m-                        log.warn("API key validation failed with status: {} - {}", e.getStatusCode(), e.getMessage()))[m
[32m+[m[32m                        log.warn("Root endpoint call failed with status: {} - {} - Response body: {}",[m[41m [m
[32m+[m[32m                                e.getStatusCode(), e.getMessage(), e.getResponseBodyAsString()))[m
                     .doOnError(Exception.class, e ->[m
[31m-                        log.error("Error validating API key: {}", e.getMessage(), e));[m
[32m+[m[32m                        log.error("Error calling root endpoint: {}", e.getMessage(), e));[m
 [m
[31m-            // Convert Mono to CompletableFuture[m
[32m+[m[32m            // Convert Mono to CompletableFuture and return true if we get any response (meaning API key is valid)[m
             return validationMono.toFuture()[m
[31m-                    .thenApply(isValid -> Boolean.TRUE.equals(isValid))[m
[32m+[m[32m                    .thenApply(response -> {[m
[32m+[m[32m                        log.debug("API key validation successful - received response from root endpoint");[m
[32m+[m[32m                        return true;[m
[32m+[m[32m                    })[m
                     .exceptionally(throwable -> {[m
[31m-                        log.error("Unexpected error during API key validation: {}", throwable.getMessage(), throwable);[m
[32m+[m[32m                        log.error("API key validation failed: {}", throwable.getMessage(), throwable);[m
                         return false;[m
                     });[m
 [m
[1mdiff --git a/src/main/resources/application.properties b/src/main/resources/application.properties[m
[1mindex 33b0f66..4d74520 100644[m
[1m--- a/src/main/resources/application.properties[m
[1m+++ b/src/main/resources/application.properties[m
[36m@@ -1,7 +1,7 @@[m
 # Database Configuration[m
[31m-spring.datasource.url=jdbc:postgresql://nucleus-staging-public.culss6gmw8na.us-east-1.rds.amazonaws.com:5432/nucleus_staging_db[m
[31m-spring.datasource.username=nucleus_staging[m
[31m-spring.datasource.password=nucleus_staging[m
[32m+[m[32mspring.datasource.url=jdbc:postgresql://nucleus-staging.c6j42qq2krlk.us-east-1.rds.amazonaws.com:5432/postgres[m
[32m+[m[32mspring.datasource.username=postgres[m
[32m+[m[32mspring.datasource.password=nucleus-staging[m
 spring.datasource.driver-class-name=org.postgresql.Driver[m
 # JPA/Hibernate Configuration[m
 spring.jpa.hibernate.ddl-auto=update[m
[36m@@ -29,5 +29,5 @@[m [mlogging.console.enabled=true[m
 logging.file.enabled=true[m
 [m
 # Client Management Service Configuration[m
[31m-client-management.service.url=http://localhost:8080[m
[32m+[m[32mclient-management.service.url=https://or0u1swckb.execute-api.us-east-1.amazonaws.com/prod[m
 client-management.service.timeout=5[m
